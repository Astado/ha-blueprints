blueprint:
  name: Cover Automation - Shutters Control (deprecated)
  description: Cover automation based on times, illuminance value, sun elevation and more (v2022-12-01)
  domain: automation
  source_url: https://github.com/hvorragend/ha-blueprints/blob/main/blueprints/automation/cover_shutters_control.yaml
  input:
    cover_entity:
      name: Cover
      description: Please select the cover entity here that is to be controlled.
      selector:
        entity:
          domain: cover
          multiple: false
    drive_delay_fix:
      name: Fixed drive delay (required)
      description: Fixed drive delay in seconds to avoid radio interferences.
      default: 0
      selector:
        number:
          min: 0.0
          max: 600.0
          unit_of_measurement: s
          step: 1.0
          mode: slider
    drive_delay_random:
      name: Random drive delay (optional)
      description: Additional random delay. Value in seconds.
      default: 0
      selector:
        number:
          min: 0.0
          max: 600.0
          unit_of_measurement: s
          step: 1.0
          mode: slider
    blocker_entity_global:
      name: Global Blocking Entity (optional)
      description:
        If this entity's state is set to blocking entity state (defined
        below), it will prevent the execution of this <ins>entire</ins> automation.
        Example "input_boolean.party_mode"
      default:
      selector:
        entity: {}
    blocker_entity_state_global:
      name: Global Blocking Entity State (optional)
      description:
        If blocking entity's state is of this state, it will prevent the
        execution of this automation.
        Example "on"
      default:
      selector:
        text: {}
    workday_sensor:
      name: Workday today sensor (required)
      description: Is required for the different times on weekdays and weekends.
      default:
      selector:
        entity:
          domain: binary_sensor
    time_up_early_weekday:
      name: Time Up Early (required)
      description: Will not drive the cover <ins>up</ins> before this time or earlier. Even if the sun elevation or illuminance threshold occurs earlier.
      default: "07:15:00"
      selector:
        time: {}
    time_up_early_we_holiday:
      name: Time Up Early Weekend (required)
      description: Will not drive the cover <ins>up</ins> before this time or earlier on weekends and holidays. Even if the sun elevation or illuminance threshold occurs earlier.
      default: "07:45:00"
      selector:
        time: {}
    time_up_late:
      name: Time Up Late (required)
      description: Will not drive the cover <ins>up</ins> after this time or earlier. Even if the sun elevation or illuminance threshold occurs later.
      default: "08:30:00"
      selector:
        time: {}
    blocker_entity_up:
      name: Blocking Entity Up (optional)
      description:
        If this entity's state is set to blocking entity state (defined
        below), it will prevent the automation from <ins>opening</ins> the cover.
        Example "input_boolean.vacation"
      default:
      selector:
        entity: {}
    blocker_entity_state_up:
      name: Blocking Entity State Up (optional)
      description:
        If blocking entity's state is of this state, it will prevent the
        automation from <ins>opening</ins> the cover.
        Example "off"
      default:
      selector:
        text: {}
    time_down_early:
      name: Time Down Early (required)
      description: Will not drive the cover <ins>down</ins> before this time or earlier. Even if the sun elevation or illuminance threshold occurs earlier.
      default: "16:30:00"
      selector:
        time: {}
    time_down_late:
      name: Time Down Late (required)
      description: Will not drive the cover <ins>down</ins> before this time or earlier. Even if the sun elevation or illuminance threshold occurs later.
      default: "22:00:00"
      selector:
        time: {}
    blocker_entity_down:
      name: Blocking Entity Down (optional)
      description:
        If this entity's state is set to blocking entity state (defined
        below), it will prevent the automation from <ins>closing</ins> the cover.
        Example "input_boolean.vacation"
      default:
      selector:
        entity: {}
    blocker_entity_state_down:
      name: Blocking Entity State Down (optional)
      description:
        If blocking entity's state is of this state, it will prevent the
        automation from <ins>closing</ins> the cover.
        Example "off"
      default:
      selector:
        text: {}
    sleep_position:
      name: Sleep position (optional)
      description: Instead of fully closing this cover, you can use a sleep position.
      default: 0
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider
    illuminance_option:
      name: Use the illuminance sensor  (optional)
      description: Select enable or disable.
      default: none
      selector:
        select:
          options:
            - label: Enable the illuminance option
              value: "illuminance_enabled"
            - label: Disable the illuminance option
              value: "illuminance_disabled"
    illuminance_sensor:
      name: Illuminance sensor (optional)
      description: This sensor will be used to determine the illumination.
      default:
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_up:
      name: Illuminance Up (optional)
      description: Drive the cover <ins>up</ins> by brightness. This value sets the brightness threshold for the morning. If the value is reached in the morning, the shutter will go up. If left empty, this option will not be applied.
      default:
      selector:
        number:
          min: 0
          max: 10000
          unit_of_measurement: lx
          step: 5
          mode: slider
    illuminance_down:
      name: Illuminance Down (optional)
      description: Drive the cover <ins>down</ins> by brightness. This value sets the brightness threshold for the evening. If the value is reached in the evening, the shutter will go down. If left empty, this option will not be applied.
      default:
      selector:
        number:
          min: 0
          max: 10000
          unit_of_measurement: lx
          step: 5
          mode: slider
    sun_option:
      name: Use The sun option (Optional)
      description: Select enable or disable.
      default: none
      selector:
        select:
          options:
            - label: Enable the sun option
              value: "sun_enabled"
            - label: Disable the sun option
              value: "sun_disabled"
    sun_elevation_up:
      name: Sun elevation to open cover (optional)
      description: The shutter will be <ins>opened</ins> if the sun elevation is over this value. If left empty, this option will not be applied.
      default:
      selector:
        number:
          min: -90.0
          max: 90.0
          unit_of_measurement: °
          step: 0.1
          mode: slider
    sun_elevation_down:
      name: Sun elevation to close cover (optional)
      description: The shutter will be <ins>closed</ins> if the sun elevation is under this value. If left empty, this option will not be applied.
      default:
      selector:
        number:
          min: -90.0
          max: 90.0
          unit_of_measurement: °
          step: 0.1
          mode: slider
    shading_option:
      name: Use the shading feature (optional)
      description: Select enable or disable.
      default: none
      selector:
        select:
          options:
            - label: Enable the shading feature
              value: "shading_enabled"
            - label: Disable the shading feature
              value: "shading_disabled"
    shading_sensor:
      name: Shading sensor (optional)
      description: Select a binary sensor which activates the shading
      default:
      selector:
        entity:
          domain: binary_sensor
    shading_position:
      name: Cover-position for shading (optional)
      description: In which position should the cover be moved when shading is activated?
      default: 25
      selector:
        number:
          min: 0
          max: 100
          step: 1
          mode: slider

trigger_variables:
  illuminance_sensor: !input illuminance_sensor
  workday_sensor: !input workday_sensor
  cover_entity: !input cover_entity
  time_up_early_weekday: !input time_up_early_weekday
  time_up_early_we_holiday: !input time_up_early_we_holiday
  time_up_late: !input time_up_late
  time_down_early: !input time_down_early
  time_down_late: !input time_down_late
  illuminance_up: !input illuminance_up
  illuminance_down: !input illuminance_down
  sun_elevation_up: !input sun_elevation_up
  sun_elevation_down: !input sun_elevation_down
  shading_sensor: !input shading_sensor
  illuminance_option: !input illuminance_option
  sun_option: !input sun_option
  shading_option: !input shading_option

variables:
  blocker_entity_up: !input blocker_entity_up
  _blocker_entity_state_up: !input blocker_entity_state_up
  blocker_entity_state_up: "{{ (_blocker_entity_state_up or '') | trim }}"
  blocker_entity_down: !input blocker_entity_down
  _blocker_entity_state_down: !input blocker_entity_state_down
  blocker_entity_state_down: "{{ (_blocker_entity_state_down or '') | trim }}"
  blocker_entity_global: !input blocker_entity_global
  _blocker_entity_state_global: !input blocker_entity_state_global
  blocker_entity_state_global: "{{ (_blocker_entity_state_global or '') | trim }}"
  sleep_position: !input sleep_position
  drive_delay_fix: !input drive_delay_fix
  drive_delay_random: !input drive_delay_random
  shading_position: !input shading_position

mode: parallel
trigger:
  - platform: template
    id: open
    value_template: >-
      {% set current_time = (as_timestamp(now()) | timestamp_custom("%H:%M:%S", true)) %}
      {% set current_elevation = state_attr("sun.sun", "elevation")  %}
      {% set illuminance_defined = (
                                  illuminance_option == 'illuminance_enabled' and
                                  illuminance_sensor != none and
                                  illuminance_up != none  
                                  )
      %} 
      {% set elevation_defined =  (
                                  sun_option == 'sun_enabled' and
                                  current_elevation != none and
                                  sun_elevation_up != none
                                  ) 
      %} 
      {% if is_state(workday_sensor, 'on') %}
          {% set time_up_early = time_up_early_weekday  %}
      {% else %}
          {% set time_up_early = time_up_early_we_holiday  %}
      {% endif %}
      {{
        (
          current_time > time_up_late and
          current_time < time_down_early
        ) 
        or
        ( 
          illuminance_defined and 
          states(illuminance_sensor) | int(0) > illuminance_up | int(0) and
          current_time >= time_up_early and
          current_time <= time_up_late
        ) 
        or
        (
          elevation_defined and
          current_elevation | int(0) > sun_elevation_up | int(0) and
          current_time >= time_up_early and
          current_time <= time_up_late
        ) 
      }}

  - platform: template
    id: close
    value_template: >-
      {% set current_time = (as_timestamp(now()) | timestamp_custom("%H:%M:%S", true)) %}
      {% set current_elevation = state_attr("sun.sun", "elevation")  %}
      {% set illuminance_defined = (
                                  illuminance_option == 'illuminance_enabled' and
                                  illuminance_sensor != none and
                                  illuminance_down != none  
                                  )
      %} 
      {% set elevation_defined =  (
                                  sun_option == 'sun_enabled' and
                                  current_elevation != none and
                                  sun_elevation_down != none
                                  ) 
      %} 
      {{
        (
          current_time > time_down_late
        ) 
        or
        (
          illuminance_defined and
          states(illuminance_sensor) | int(0) < illuminance_down | int(0) and
          current_time >= time_down_early and
          current_time <= time_down_late
        ) 
        or
        (
          elevation_defined and 
          current_elevation | int(0) < sun_elevation_down | int(0) and
          current_time >= time_down_early and
          current_time <= time_down_late
        )
      }}

  - platform: template
    id: shading
    value_template: >-
      {{ 
        shading_option == 'shading_enabled' and
        shading_sensor != none and
        states(shading_sensor) == 'on'
       }}

condition:
  - condition: template
    value_template: "{{ not blocker_entity_global or not states(blocker_entity_global) | regex_match('^('+blocker_entity_state_global +')$', ignorecase=true) }}"

action:
  - delay:
      hours: 0
      minutes: 0
      seconds: "{{ range(drive_delay_fix|int(0), drive_delay_fix|int(0) + drive_delay_random|int(0) +1) | random  }}"
      milliseconds: 0
  - choose:
      - conditions:
          - condition: trigger
            id: open
          - condition: template
            value_template: "{{ not blocker_entity_up or not states(blocker_entity_up) | regex_match('^('+blocker_entity_state_up +')$', ignorecase=true) }}"
          - condition: template
            value_template: >-
              {{ 
                shading_option == 'shading_disabled' or
                shading_sensor == none or
                (
                  shading_option == 'shading_enabled' and
                  shading_sensor != none and
                  states(shading_sensor) == 'off'
                )
              }}
        sequence:
          - service: cover.open_cover
            data: {}
            target:
              entity_id: "{{ cover_entity }}"
      - conditions:
          - condition: trigger
            id: close
          - condition: template
            value_template: "{{ not blocker_entity_down or not states(blocker_entity_down) | regex_match('^('+blocker_entity_state_down +')$', ignorecase=true) }}"
          - condition: template
            value_template: >-
              {{ 
                sleep_position == none or
                (
                  sleep_position != none and 
                  sleep_position | float(0) == 0
                )
              }}
        sequence:
          - service: cover.close_cover
            target:
              entity_id: "{{ cover_entity }}"
      - conditions:
          - condition: trigger
            id: close
          - condition: template
            value_template: "{{ not blocker_entity_down or not states(blocker_entity_down) | regex_match('^('+blocker_entity_state_down +')$', ignorecase=true) }}"
          - condition: template
            value_template: >-
              {{ 
                sleep_position != none and
                sleep_position | float(0) > 0 
              }}
          - condition: template
            value_template: >-
              {{ 
                shading_option == 'shading_disabled' or
                shading_sensor == none or
                (
                  shading_option == 'shading_enabled' and
                  shading_sensor != none and
                  (
                    states(shading_sensor) == 'on' and
                    sleep_position  < shading_position
                  ) 
                  or
                  (
                    states(shading_sensor) == 'off'
                  )
                ) 
              }}
        sequence:
          - service: cover.set_cover_position
            data:
              position: "{{ sleep_position }}"
            target:
              entity_id: "{{ cover_entity }}"
      - conditions:
          - condition: trigger
            id: shading
          - condition: time
            after: !input time_up_late
            before: !input time_down_late
          - condition: template
            value_template: "{{ state_attr(cover_entity, 'current_position')  > shading_position }}"
        sequence:
          - service: cover.set_cover_position
            data:
              position: "{{ shading_position }}"
            target:
              entity_id: "{{ cover_entity }}"
