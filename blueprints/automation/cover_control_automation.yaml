blueprint:
  name: "Cover Control Automation (CCA)"
  description: >-
    # Cover Control Automation (CCA)

    **Version: 2024.01.16** / hvorragend

    This is a comprehensive blueprint that can be used for the following basic purposes:
      - Opening and closing the roller shutters (depending on brightness, sun-elevation and within time windows)
      - Extensive automatic sun shading


    <details>


    *This was originally a fork of Eimeel's blueprint [automatic_blinds_shading.yaml](https://gist.github.com/jmerifjKriwe/bffbc7424dd04f4a31d6a71f7012cd1f) and is largely based on his programming.*<br />

    **NOTES**

    - It is not possible to execute this automation manually!
    - In order to have extensive flexibility here, different sensors are used. But there is also the possibility to define an occupant of the room,
      so that e.g. the roller shutter does not go up in the morning, although the occupant is still sleeping.
    - The automation only moves the roller shutter if it is positioned at one of the defined positions
      (ventilate position, shading position, open position or closed position). Otherwise, the roller shutter has been moved manually.
      After a manual movement, it is unclear what is intended to be achieved, so the automation no longer takes action.
      To automate the movement of the roller shutter again, it must be moved to one of the defined positions beforehand.

    [GitHub Source](https://github.com/hvorragend/ha-blueprints/blob/main/blueprints/automation/cover_control_automation.yaml)

    </details>

  #  Synced with version 2024010301 of the origin

  # Differences to the Eimeel blueprint:
  # - Icons-Updates
  # - Streamline variables
  # - Some GUI-changes
  # - Added sun elevation feature: Sun control for up/down
  # - Added waiting time duration for sensors
  # - Added fixed/random drive delays
  # - Added external shading state sensor. Will probably be removed again.
  # - Added several condition selectors: Useful to be able to check various conditions such as party mode or similar when opening, closing, shading, etc.
  # - Closing after shading just when position is lower than before
  # - Added the possibility that the previous position did not necessarily have to be controlled by the automation.
  # - Added optional Cover Status Helper

  # Notes / Planned modifications:
  # - Cover Status Helper / Position Check: What if a cover isn't opened by the automation? We need a state change in helper.
  #   1) Position Trigger with current_position higher than shading => open: on
  #   2) Position Trigger with current_position lower then ventilate/shading => close: on
  #   3) Shading Overwrite? How to recognize it?
  #   4) Ventilate was overridden? How to recognize it?
  # - Checking external Shading State Sensor in more conditions?
  # - Hotdaycheck: Forecast and not just current temperature
  # - Low priority: Check if cover was moved manually. Should I correct the position after a longer wating time? Not sure.
  # - Do I want to use the shading to open a completely closed blind?

  # - QUESTION Brightness Lower/Higher-Check?
  # - QUESTION Allow shading out if cover is closed?

  # Validations - Unsure if this is necessary
  # - brightness_down must be lower than brightness_up
  # - closed_position must be lower than ventilate_position and shading_cover_position
  # - open_position must be higher than closed_position and ventilate_position

  source_url: https://github.com/hvorragend/ha-blueprints/blob/main/blueprints/automation/cover_control_automation.yaml
  domain: automation
  homeassistant:
    min_version: "2023.9.0"
  input:
    blind:
      name: "üè† Cover"
      description: "Which blind or roller shutter should be automated?"
      selector:
        entity:
          filter:
            - domain:
                - cover
    auto_global_condition:
      name: "‚ùì Additional condition for the entire automation"
      description: "With this condition you can prevent the execution of the <ins>entire</ins> automation. With this option you could enable a party mode.\n\n`Optional`"
      default: []
      selector:
        condition: {}

    drive_delay_fix:
      name: "üïõ Fixed Drive Delay"
      description: "Fixed drive delay in seconds to avoid radio interferences."
      default: 0
      selector:
        number:
          min: 0.0
          max: 600.0
          unit_of_measurement: s
          step: 1.0
          mode: slider
    drive_delay_random:
      name: "üïõ Random Drive Delay"
      description: "Additional random delay. Value in seconds.\n\n`Optional`"
      default: 5
      selector:
        number:
          min: 0.0
          max: 600.0
          unit_of_measurement: s
          step: 1.0
          mode: slider
    position_tolerance:
      name: "„Ä∞Ô∏è Position Tolerance"
      description: "Tolerance to be applied when comparing the current position with the to be position"
      default: 0
      selector:
        number:
          min: 0.0
          max: 9.0
          unit_of_measurement: "%"

    auto_up_options:
      name: "üîº Open Automation"
      description: "Basic automation for opening the cover. Please select one of the options."
      default: auto_up_enabled
      selector:
        select:
          options:
            - label: "Enable the cover open feature"
              value: "auto_up_enabled"
            - label: "Disable the cover open feature"
              value: "auto_up_disabled"
    auto_up_condition:
      name: "üîº Additional Condition For Opening The Cover"
      description: "With this condition you can prevent the automation from <ins>opening</ins> the cover. You can use this, for example, if the covers normally don't open, but you really want to do it on vacation.\n\n`Optional`"
      default: []
      selector:
        condition: {}
    open_position:
      name: "üîº Open Position"
      description: "To which position should the shutter be moved to be open?"
      default: 100
      selector:
        number:
          min: 0.0
          max: 100.0
          unit_of_measurement: "%"
    resident_sensor:
      name: "üîº Overwrite Mode For Opening And Unplannend Closing (aka Resident mode)"
      description: #
        "This switch can be used to override the automatic opening of the shutter. If this sensor (input_boolean or binary_sensor) is set to ON, the shutter will not open automatically.\n
        This can be used e.g. to define a resident for the room. In this case, the roller shutter only opens when the resident is no longer asleep.\nFor this it is necessary to use a
        boolean sensor that returns TRUE/ON for sleeping and FALSE/OFF for non-sleeping.
        \nThe cover will also close (without checking the defined times) if this sensor switches to TRUE/ON (because the resident is sleeping).  \n\n`Optional`"
      default: []
      selector:
        entity:
          domain:
            - input_boolean
            - binary_sensor
    time_up_early:
      name: "üîº Time For Drive Up - Early On Workdays"
      description: "The earliest time at which the cover may be opened. The cover will be opened if AFTER this time the defined brightness value is high enough. (**NOTE**: If an occupant is defined, he must also be awake)."
      default: "06:00:00"
      selector:
        time: {}
    time_up_early_non_workday:
      name: "üîº Time For Drive Up - Early On Non-Workdays"
      description: "As directly above, but for non-workdays."
      default: "07:00:00"
      selector:
        time: {}
    time_up_late:
      name: "üîº Time For Drive Up - Late"
      description:
        "The latest time at which the cover should be opened. If the required brightness value has NOT yet been reached by this time, the cover will still be opened.
        (**NOTE**: If an occupant is defined and he is still asleep, the cover will NOT be opened. It will only be opened when the occupant has woken up)."
      default: "08:00:00"
      selector:
        time: {}

    auto_down_options:
      name: "üîª Close Automation"
      description: "Basic automation for closing the cover. Please select one of the options."
      default: auto_down_enabled
      selector:
        select:
          options:
            - label: "Enable The Cover Close Feature"
              value: "auto_down_enabled"
            - label: "Disable The Cover Close Feature"
              value: "auto_down_disabled"
    auto_down_condition:
      name: "üîª Additional Condition For Closing The Cover"
      description: "With this condition you can prevent the automation from <ins>closing</ins> the cover. You can use this, for example, at Christmas time or if you want the covers to behave differently while on vacation.\n\n`Optional`"
      default: []
      selector:
        condition: {}
    closed_position:
      name: "üîª Closed Position"
      description: "To which position should the shutter be moved to be closed?"
      default: 0
      selector:
        number:
          min: 0.0
          max: 100.0
          unit_of_measurement: "%"
    time_down_early:
      name: "üîª Time For Drive Down - Early"
      description: "The earliest time at which the cover may be closed. The cover will be closed if AFTER this time the defined brightness value is low enough."
      default: "16:00:00"
      selector:
        time: {}
    time_down_late:
      name: "üîª Time For Drive Down - Late"
      description: "The latest time at which the cover should be closed. If the required brightness value has NOT yet been reached by this time, the cover will still be closed."
      default: "22:00:00"
      selector:
        time: {}

    door_sensor:
      name: "üö™ Door Or Window"
      description: "Does the cover belong to a window (FALSE) or a door (TRUE)? In the case of a door, an attempt is made to prevent the cover from being lowered when the door is open in order to prevent it from being locked out. (without guarantee!)\n\n`Optional`"
      default: "false"
      selector:
        select:
          options:
            - label: "Window"
              value: "false"
            - label: "Door"
              value: "true"
    workday_sensor:
      name: "üíº Sensor For Workday/Non-Workday"
      description: "It may be desired to open a cover at a different time on work days than on non-work days. The corresponding binary sensor can be defined here. If not set, the cover will open every time at time_up_early.\n\n`Optional`"
      default: []
      selector:
        entity:
          filter:
            - domain:
                - input_boolean
                - binary_sensor

    auto_brightness_options:
      name: "üîÖ Brightness Sensor Automation"
      description: "Please select one of the options.\n\n`Optional`"
      default: auto_brightness_enabled
      selector:
        select:
          options:
            - label: "Enable The Brightness Feature For Up And Down"
              value: "auto_brightness_enabled"
            - label: "Disable The Brightness Feature For Up And Down"
              value: "auto_brightness_disabled"
    default_brightness_sensor:
      name: "üîÖ Default Brightness Sensor For Up And Down"
      description: "This default brightness sensor can be defined here, which is used for daily up and down.\n\n`Optional`"
      default: []
      selector:
        entity:
          filter:
            - domain:
                - sensor
    brightness_time_duration:
      name: "üîÖ Brightness Time Duration"
      description: "Defines the time to given brightness sensor must be stay above/below the thresholds."
      default:
        hours: 0
        minutes: 0
        seconds: 30
      selector:
        duration:
    brightness_up:
      name: "üîº Brightness Value For Opening The Cover"
      description: "The brightness value from which the cover should be opened.\n\n`Optional`"
      default: 70
      selector:
        number:
          min: 0.0
          max: 1000.0
          unit_of_measurement: lx
          step: 10.0
    brightness_down:
      name: "üîª Brightness Value For Closing The Cover"
      description: "The brightness value from which the cover should be closed. Must be lower then the brightness up value.\n\n`Optional`" ## TODO: Really be lower?
      default: 10
      selector:
        number:
          min: 0.0
          max: 1000.0
          unit_of_measurement: lx
          step: 10.0

    auto_sun_options:
      name: "‚òÄÔ∏è Sun Elevation Automation"
      description: "Please select one of the options.\n\n`Optional`"
      default: auto_sun_enabled
      selector:
        select:
          options:
            - label: "Enable The Sun Feature For Up And Down"
              value: "auto_sun_enabled"
            - label: "Disable The Sun Feature For Up And Down"
              value: "auto_sun_disabled"
    default_sun_sensor:
      name: "‚òÄÔ∏è Sun Sensor For Up And Down"
      description:
        "Which sensors provides attributes with current azimuth and elevation of sun. I strongly suggest to use sun.sun. Please make sure that the integration is activated and provides the attributes.
        <strong>Important: If you want to use automatic shading, the sensor must also be specified here. Regardless of whether the basic sun control is used.</strong>
        \n\n`Optional`\n\n`Shading`"
      default: "sun.sun"
      selector:
        entity:
          filter:
            - domain:
                - sun
    sun_time_duration:
      name: "‚òÄÔ∏è Sun Time Duration"
      description: "Defines the time to given sun sensor must be stay above/below the thresholds."
      default:
        hours: 0
        minutes: 0
        seconds: 30
      selector:
        duration:
    sun_elevation_up:
      name: "üîº Sun Elevation Value For Opening The Cover"
      description: "The cover will be <ins>opened</ins> if the sun elevation is over this value. If left empty, this option will not be applied.\n\n`Optional`"
      default: []
      selector:
        number:
          min: -90.0
          max: 90.0
          unit_of_measurement: ¬∞
          step: 0.1
          mode: slider
    sun_elevation_down:
      name: "üîª Sun Elevation Value For Closing The Cover"
      description: "The cover will be <ins>closed</ins> if the sun elevation is under this value. If left empty, this option will not be applied.\n\n`Optional`"
      default: []
      selector:
        number:
          min: -90.0
          max: 90.0
          unit_of_measurement: ¬∞
          step: 0.1
          mode: slider

    auto_ventilate_options:
      name: "üí® Ventilation Automation"
      description: "Automation for ventilation? Please select one of the options."
      default: auto_ventilate_disabled
      selector:
        select:
          options:
            - label: "Enable The Ventilate Feature"
              value: "auto_ventilate_enabled"
            - label: "Disable The Ventilate Feature"
              value: "auto_ventilate_disabled"
    window_sensor:
      name: "üö™ Window Or Door Sensor"
      description:
        "This can be used to define whether the cover belongs to a window or an (outer) door with a window opening sensor.
        If this is the case, a Ventilate function can be used.
        This means that the Ventilate position is approached when the window is opened/tilted.
        This sensor can be defined here.\n\n`Optional`"
      default: []
      selector:
        entity:
          filter:
            - domain:
                - binary_sensor
    ventilate_position:
      name: "üí® Ventilate Position"
      description:
        "What position should the cover move to when opening the window/door and the cover is closed to allow ventilation?
        If closing is triggered and the window_sensor is 'on' the cover will move to this position instead of closing completly\n\nShould not be 100. In this case please use 99 \n\n`Optional`"
      default: 30
      selector:
        number:
          min: 0.0
          max: 100.0
          unit_of_measurement: "%"

    auto_shading_options:
      name: "üï∂Ô∏è Shading Automation"
      description: "Use the shading feature. Please select one of the options.\n\n`Optional`\n\n`Shading`"
      default: auto_shading_enabled
      selector:
        select:
          options:
            - label: "Enable The Shading Feature"
              value: "auto_shading_enabled"
            - label: "Disable The Shading Feature"
              value: "auto_shading_disabled"
    auto_shading_start_condition:
      name: "üï∂Ô∏è Additional Condition For Activating Sun Shading"
      description: "Externally override the entire automation? This condition it will prevent the shading-IN-automation. This can be useful if you want to temporarily disable automation (e.g. because of control by other automations).\n\n`Optional`\n\n`Shading`"
      default: []
      selector:
        condition: {}
    auto_shading_end_condition:
      name: "üï∂Ô∏è Additional Condition For Disabling Sun Shading"
      description: "Externally override the entire automation? This condition it will prevent the shading-OUT-automation. This can be useful if you want to temporarily disable automation (e.g. because of control by other automations).\n\n`Optional`\n\n`Shading`"
      default: []
      selector:
        condition: {}
    shading_cover_position:
      name: "üï∂Ô∏è Shading Position"
      description: "To which position should the cover be moved for shading?\n\n`Shading`"
      default: 25
      selector:
        number:
          min: 0.0
          max: 100.0
          unit_of_measurement: "%"
    shading_tilt_position:
      name: "üï∂Ô∏èShading Tilt Position"
      description: "To which tilt position should the cover be moved for shading?\n\n`Shading`"
      default: 50
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    shading_azimuth_start:
      name: "üï∂Ô∏è Shading Azimuth Start Value"
      description: "What is the minimum azimuth at which the sun hits the window? (Shading will start)\n\n`Sun sensor needs to be configured above`\n\n`Shading`"
      default: 95
      selector:
        number:
          min: 0
          max: 365
          unit_of_measurement: "¬∞"
    shading_azimuth_end:
      name: "üï∂Ô∏è Shading Azimuth End Value"
      description:
        "What is the maximum azimuth at which the sun hits the window? (Shading will stop)
        \n\n`Sun sensor needs to be configured above`\n\n`Shading`"
      default: 265
      selector:
        number:
          min: 0
          max: 365
          unit_of_measurement: "¬∞"
    shading_elevation_min:
      name: "üï∂Ô∏è Shading Elevation Minimum Value"
      description: "Starting from which elevation of the sun should the window be shaded? (Here it makes sense to consider surrounding buildings, trees, etc.).\n\n`Sun sensor needs to be configured above`\n\n`Shading`"
      default: 25
      selector:
        number:
          min: 0
          max: 90
          unit_of_measurement: "¬∞"
    shading_elevation_max:
      name: "üï∂Ô∏è Shading Elevation Maximum Value"
      description: "What is the maximal elevation for elevation?
        (In most cases, 90 degrees is probably the most reasonable value. However, this can also be different due to surrounding buildings, etc.)
        \n\n`Sun sensor needs to be configured above`\n\n`Shading`"
      default: 90
      selector:
        number:
          min: 0
          max: 90
          unit_of_measurement: "¬∞"
    shading_temperatur_sensor1:
      name: "üï∂Ô∏è Shading Temperature Sensor 1"
      description: "This is the main temperature sensor. (Here, for example, the current outdoor or indoor temperature can be used as a condition). This sensor does not have to be defined if the shading is to take place independently of it.\n\n`Optional`\n\n`Shading`"
      selector:
        entity:
          filter:
            - domain:
                - sensor
      default: []
    shading_min_temperatur1:
      name: "üï∂Ô∏è Shading Temperature Sensor 1 Minimum Value"
      description: "Minimum temperature for sensor 1 above which shading should occur.\n\n`Optional`\n\n`Shading`"
      default: 18
      selector:
        number:
          min: 0.0
          max: 50.0
          unit_of_measurement: "¬∞C"
    shading_temperatur_sensor2:
      name: "üï∂Ô∏è Shading Temperature Sensor 2"
      description: "This is a secondary temperature sensor.
        (Here, for example, a temperature difference sensor can be used as a criterion.
        Or, if Sensor1 is outdoor temperature, you can use indoor temperature).
        This sensor does not have to be defined.\n\n`Optional`\n\n`Shading`"
      default: []
      selector:
        entity:
          filter:
            - domain:
                - sensor
    shading_min_temperatur2:
      name: "üï∂Ô∏è Shading Temperature Sensor 2 Minimum Value"
      description: "Minimum temperature for sensor 1 above which shading should occur.\n\n`Optional`\n\n`Shading`"
      default: 18
      selector:
        number:
          min: 0.0
          max: 50.0
          unit_of_measurement: "¬∞C"
    shading_brightness_sensor:
      name: "üï∂Ô∏è Brightness Sensor For Shading"
      description: "An additional brightness sensor can be defined here, which is only used for shading. (Leave free if the same as the default brightness sensor is to be used).\n\n`Optional`\n\n`Shading`"
      default: []
      selector:
        entity:
          filter:
            - domain:
                - sensor
    shading_sun_brightness_start:
      name: "üï∂Ô∏è Shading Brightness Start Value"
      description:
        "The minimum brightness value from which shading should start.
        (Must be above the value of brightness out!)\n\n`Optional`\n\n`Shading`"
      default: 35000
      selector:
        number:
          min: 0.0
          max: 100000.0
          unit_of_measurement: lx
          step: 10.0
    shading_sun_brightness_end:
      name: "üï∂Ô∏è Shading Brightness End Value"
      description:
        "The brightness value from which shading is no longer necessary.
        (Must be BELOW the value of brightness in!).\n\n`Optional`\n\n`Shading`"
      default: 25000
      selector:
        number:
          min: 0.0
          max: 100000.0
          unit_of_measurement: lx
          step: 10.0
    shading_forecast_sensor:
      name: "üï∂Ô∏è Forecast Temperature Sensor"
      description:
        "Another temperature sensor. In this case, however, explicitly for use with a forecast.
        The idea is that it can happen, especially in spring, that the value for the temperature sensor1 is exceeded by
        strong solar radiation and the shading would be started.
        However, in spring you may not want shading, but the solar radiation as a welcome, free heating is desired.
        So you can define via the forecast sensor that shading is only started at an expected daily maximum temperature.
        **NOTE**: Sensor must support weather.get_forecasts which has been introduced with HA 2023.9\n\n`Optional`\n\n`Shading`"
      default: []
      selector:
        entity:
          filter:
            - domain:
                - weather
    shading_forecast_temp:
      name: "üï∂Ô∏è Forecast Temperatur Value"
      description:
        "Minimum temperature for forecast sensor above which shading should occur.
        **NOTE**: If temperature sensor1 is also defined and its temperature rises above the value defined here,
        this condition is considered to be TRUE.\n\n`Optional`\n\n`Shading`"
      default: 20
      selector:
        number:
          min: 0.0
          max: 50.0
          unit_of_measurement: "¬∞C"
    shading_weather_conditions:
      name: "üï∂Ô∏è Weather Conditions"
      description:
        "Check the following weather conditions when activating the shading.
        **NOTE**: Forecast sensor needs to be defined\n\n`Optional`\n\n`Shading`"
      default:
        - sunny
        - partlycloudy
        - cloudy
        - clear
      selector:
        select:
          multiple: true
          options:
            - "clear-night"
            - "clear"
            - "cloudy"
            - "fog"
            - "hail"
            - "lightning"
            - "lightning-rainy"
            - "partlycloudy"
            - "pouring"
            - "rainy"
            - "snowy"
            - "snowy-rainy"
            - "sunny"
            - "windy"
            - "windy-variant"
            - "exceptional"
    shading_waitingtime_start:
      name: "üï∂Ô∏è Waiting Time For Shading Start (in seconds)"
      description:
        "To prevent excessive stress on the motor, a waiting time for starting shading can be defined here.
        Shading then only STARTs when the conditions are fulfilled over the entire waiting time IN.\n\n`Shading`"
      default: 300
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: s
    shading_waitingtime_end:
      name: "üï∂Ô∏è Waiting Time For Shading End (in seconds)"
      description:
        "To prevent excessive stress on the motor, a waiting time can be defined here.
        Shading then ENDs when ONE of the conditions is NOT fulfilled over the entire waiting time OUT.\n\n`Shading`"
      default: 900
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: s

    cover_status_options:
      name: "üî§ Checking the current position or saving the status in a helper?"
      description:
        "The blueprint only executes roller blind movements when the cover is in a position controlled by the automation.
        If this is not the case, it is assumed that the last drive was manual initiated and the automation does nothing further.
        The advantage of this is that you don't have to create a helper in Home Assistant.
        But if you also want to be able to intervene manually and the automation carries out the next roller blind movements as normal, a helper is required.
        Without helper, the manual override would always be overwritten by the automation.
        However, the roller blind does not always have to be in an exact position."
      default: cover_helper_disabled
      selector:
        select:
          options:
            - label: "The status of the cover should be saved in an external helper"
              value: "cover_helper_enabled"
            - label: "The cover should only be moved if they are in the correct position"
              value: "cover_helper_enabled"
    cover_status_helper:
      name: "üî§ Helper - Last Cover Event"
      description: "Input Text used to store the last cover event. *Attention:* You will need to manually create a text input entity for this."
      default: []
      selector:
        entity:
          domain: input_text

mode: restart
max_exceeded: silent

variables:
  blind: !input blind
  blind_entities: "{{ expand(blind) | map(attribute='entity_id') | list }}"

  # Cover Status Helper
  cover_status_options: !input cover_status_options
  cover_status_helper: !input cover_status_helper
  cover_status_helper_enabled: "{{ ('cover_helper_enabled' in cover_status_options and cover_status_helper != []) }}"
  cover_status_helper_disabled: "{{ ('cover_helper_disabled' in cover_status_options or cover_status_helper == []) }}"
  cover_status_open: "{{ cover_status_helper_enabled and (states(cover_status_helper)|from_json).open | bool }}"
  cover_status_close: "{{ cover_status_helper_enabled and (states(cover_status_helper)|from_json).close | bool }}"
  cover_status_ventilate: "{{ cover_status_helper_enabled and (states(cover_status_helper)|from_json).ventilate | bool }}"
  cover_status_shading: "{{ cover_status_helper_enabled and (states(cover_status_helper)|from_json).shading | bool }}"

  # Modes
  auto_up_options: !input auto_up_options
  auto_down_options: !input auto_down_options
  auto_ventilate_options: !input auto_ventilate_options
  auto_shading_options: !input auto_shading_options
  auto_brightness_options: !input auto_brightness_options
  auto_sun_options: !input auto_sun_options

  # Brightness
  default_brightness_sensor: !input default_brightness_sensor
  brightness_up: !input brightness_up
  brightness_down: !input brightness_down

  # Sun
  default_sun_sensor: !input default_sun_sensor
  sun_elevation_up: !input sun_elevation_up
  sun_elevation_down: !input sun_elevation_down

  # Times / Delays
  time_up_early: !input time_up_early
  time_up_late: !input time_up_late
  time_up_early_non_workday: !input time_up_early_non_workday
  time_down_early: !input time_down_early
  time_down_late: !input time_down_late
  workday_sensor: !input workday_sensor
  drive_delay_fix: !input drive_delay_fix
  drive_delay_random: !input drive_delay_random

  # Positions
  open_position: !input open_position
  closed_position: !input closed_position
  position_tolerance: !input position_tolerance
  ventilate_position: !input ventilate_position

  # Overrides / Sensors
  door_sensor: !input door_sensor
  window_sensor: !input window_sensor
  resident_sensor: !input resident_sensor

  # Shading
  shading_brightness_sensor: !input shading_brightness_sensor
  shading_temperatur_sensor1: !input shading_temperatur_sensor1
  shading_temperatur_sensor2: !input shading_temperatur_sensor2
  shading_min_temperatur1: !input shading_min_temperatur1
  shading_min_temperatur2: !input shading_min_temperatur2
  shading_azimuth_start: !input shading_azimuth_start
  shading_azimuth_end: !input shading_azimuth_end
  shading_elevation_min: !input shading_elevation_min
  shading_elevation_max: !input shading_elevation_max
  shading_cover_position: !input shading_cover_position
  shading_tilt_position: !input shading_tilt_position
  shading_sun_brightness_start: !input shading_sun_brightness_start
  shading_sun_brightness_end: !input shading_sun_brightness_end
  shading_waitingtime_start: !input shading_waitingtime_start
  shading_waitingtime_end: !input shading_waitingtime_end
  shading_forecast_sensor: !input shading_forecast_sensor
  shading_forecast_temp: !input shading_forecast_temp
  shading_weather_conditions: !input shading_weather_conditions

  current_position: "{{ state_attr(blind, 'current_position') if state_attr(blind, 'current_position') is not none else state_attr(blind, 'position') }}"
  current_sun_azimuth: "{{ state_attr(default_sun_sensor, 'azimuth') }}"
  current_sun_elevation: "{{ state_attr(default_sun_sensor, 'elevation') }}"

trigger:
  # triggers for shading in
  - platform: numeric_state
    entity_id: !input shading_temperatur_sensor1
    above: !input shading_min_temperatur1
    id: "t_si_1"
  - platform: numeric_state
    entity_id: !input shading_temperatur_sensor2
    above: !input shading_min_temperatur2
    id: "t_si_2"
  - platform: numeric_state
    entity_id: !input shading_brightness_sensor
    above: !input shading_sun_brightness_start
    id: "t_si_3"
  - platform: numeric_state
    entity_id: !input default_sun_sensor
    attribute: elevation
    above: !input shading_elevation_min
    id: "t_si_4"
  - platform: numeric_state
    entity_id: !input default_sun_sensor
    attribute: azimuth
    above: !input shading_azimuth_start
    below: !input shading_azimuth_end
    id: "t_si_5"
  - platform: numeric_state
    entity_id: !input shading_temperatur_sensor1
    above: !input shading_forecast_temp
    id: "t_si_6"
  # - platform: state #FIXME
  #   entity_id: !input auto_shading_start_condition
  #   id: "t_si_7"
  #   for: "00:00:05" # we need a small delay cause temporary_disable_shading also triggers shading in

  # triggers for shading out
  - platform: numeric_state
    entity_id: !input shading_temperatur_sensor1
    below: !input shading_min_temperatur1
    id: "t_so_1"
  - platform: numeric_state
    entity_id: !input shading_temperatur_sensor2
    below: !input shading_min_temperatur2
    id: "t_so_2"
  - platform: numeric_state
    entity_id: !input shading_brightness_sensor
    below: !input shading_sun_brightness_end
    id: "t_so_3"
  - platform: numeric_state
    entity_id: !input default_sun_sensor
    attribute: elevation
    above: !input shading_elevation_max
    id: "t_so_4"
  - platform: numeric_state
    entity_id: !input default_sun_sensor
    attribute: azimuth
    above: !input shading_azimuth_end
    id: "t_so_5"
  - platform: numeric_state
    entity_id: !input default_sun_sensor
    attribute: elevation
    below: !input shading_elevation_min
    id: "t_so_6"
  # - platform: state #FIXME
  #   entity_id: !input auto_shading_start_condition
  #   id: "t_so_7" ## it's a duplicate of t_si_7 but we need both as a kind of workaround as all other triggers for shading in/out could already have fired
  #   for: "00:00:02" # we need a small delay cause temporary_disable_shading also triggers shading in

  # trigger for opening cover
  - platform: numeric_state
    entity_id: !input default_brightness_sensor
    above: !input brightness_up
    for: !input brightness_time_duration
    id: "t_bo_1"
  - platform: time
    at: !input time_up_late
    id: "t_bo_2"
  - platform: time
    at: !input time_up_early
    id: "t_bo_3"
  - platform: time
    at: !input time_up_early_non_workday
    id: "t_bo_4"
  - platform: state
    entity_id: !input resident_sensor
    from: "on"
    to: "off"
    id: "t_bo_5"
  - platform: numeric_state
    entity_id: !input shading_brightness_sensor
    above: !input brightness_up
    for: !input brightness_time_duration
    id: "t_bo_6"
  - platform: numeric_state
    entity_id: !input default_sun_sensor
    above: !input sun_elevation_up
    attribute: elevation
    for: !input sun_time_duration
    id: "t_bo_7"

  # trigger for closing cover
  - platform: numeric_state
    entity_id: !input default_brightness_sensor
    below: !input brightness_down
    for: !input brightness_time_duration
    id: "t_bc_1"
  - platform: time
    at: !input time_down_early
    id: "t_bc_2"
  - platform: time
    at: !input time_down_late
    id: "t_bc_3"
  - platform: state
    entity_id: !input window_sensor
    from: "on"
    to: "off"
    id: "t_bc_4"
  - platform: state
    entity_id: !input resident_sensor
    from: "off"
    to: "on"
    id: "t_bc_5"
  - platform: numeric_state
    entity_id: !input shading_brightness_sensor
    below: !input brightness_down
    for: !input brightness_time_duration
    id: "t_bc_6"
  - platform: numeric_state
    entity_id: !input default_sun_sensor
    attribute: elevation
    below: !input sun_elevation_down
    for: !input sun_time_duration
    id: "t_bc_7"

  # trigger for ventilate
  - platform: state
    entity_id: !input window_sensor
    from: "off"
    to: "on"
    id: "t_bv_1"

condition:
  - condition: !input auto_global_condition
  - or:
      - "{{ 'auto_shading_enabled' in auto_shading_options }}"
      - "{{ 'auto_up_enabled' in auto_up_options }}"
      - "{{ 'auto_down_enabled' in auto_down_options }}"

action:
  ## we have to call a service for forecast due to HA changes
  - if:
      - "{{ (shading_forecast_sensor != [] ) }}"
    then:
      - service: weather.get_forecasts
        target:
          entity_id: !input shading_forecast_sensor
        data:
          type: daily
        response_variable: forecast

  - if:
      - "{{ 'cover_helper_enabled' in cover_status_options }}"
      - "{{ cover_status_helper != [] }}"
      - '{{ not states(cover_status_helper) | regex_match("((\[[^\}]+)?\{s*[^\}\{]{3,}?:.*\}([^\{]+\])?)") }}'
    then:
      - service: input_text.set_value
        data:
          entity_id: !input cover_status_helper
          value: |
            {% set dictionary = {'open': 'off', 'close': 'off', 'ventilate': 'off', 'shading': 'off', 't': as_timestamp(now())} %}
            {{ dictionary | to_json }}

  - choose:
      - alias: "Check and perform shading in or covers up"
        conditions:
          - or:
              - "{{ 'auto_shading_enabled' in auto_shading_options }}"
              - "{{ 'auto_up_enabled' in auto_up_options }}"
          - or:
              # Check if we have a trigger for shading in
              - condition: trigger
                id:
                  - "t_si_1" # shading_min_temperatur1
                  - "t_si_2" # shading_min_temperatur2
                  - "t_si_3" # shading_sun_brightness_start
                  - "t_si_4" # shading_elevation_min
                  - "t_si_5" # shading_azimuth
                  - "t_si_6" # shading_forecast_temp
                  - "t_si_7" # auto_shading_start_condition
              # Check if we have a trigger for covers up
              - condition: trigger
                id:
                  - "t_bo_1" # brightness_up - default_brightness_sensor
                  - "t_bo_2" # time_up_late
                  - "t_bo_3" # time_up_early
                  - "t_bo_4" # time_up_early_non_workday
                  - "t_bo_5" # resident
                  - "t_bo_6" # brightness_up - shading_brightness_sensor
                  - "t_bo_7" # sun_elevation_up
        sequence:
          - choose:
              - alias: "Checking for shading in"
                conditions:
                  - and: # Check if we want to perform shading in
                      - "{{ 'auto_shading_enabled' in auto_shading_options }}"
                      - condition: !input auto_shading_start_condition
                      - "{{ now() >= today_at(time_up_early) }}"
                      - "{{ now() <= today_at(time_down_late) + timedelta(seconds = 5) }}"
                      - "{{ ( (shading_temperatur_sensor1 == [] ) or (states(shading_temperatur_sensor1) | int(default=shading_min_temperatur1) >= shading_min_temperatur1) ) }}"
                      - "{{ ( (shading_temperatur_sensor2 == [] ) or (states(shading_temperatur_sensor2) | int(default=shading_min_temperatur2) >= shading_min_temperatur2) ) }}"
                      - "{{ ( (shading_brightness_sensor == [] ) or (states(shading_brightness_sensor) | int(default=shading_sun_brightness_start) >= shading_sun_brightness_start) ) }}"
                      - "{{ current_sun_azimuth >= shading_azimuth_start and current_sun_azimuth <= shading_azimuth_end }}"
                      - "{{ current_sun_elevation >= shading_elevation_min and current_sun_elevation <= shading_elevation_max }}"
                      - "{{ current_position | int(default=101) > shading_cover_position }}"
                      - "{{ ( (resident_sensor == [] ) or (is_state(resident_sensor, ['false', 'off'])) ) }}"
                      - or:
                          - "{{ ( shading_forecast_sensor == [] ) and (shading_temperatur_sensor1 == [] ) }}"
                          - "{{ ( shading_forecast_sensor != [] ) and ( forecast.forecast[0].temperature | int(default=shading_forecast_temp) >= shading_forecast_temp ) }}"
                          - "{{ ( shading_temperatur_sensor1 != [] ) and (states(shading_temperatur_sensor1) | int(default=shading_forecast_temp) >= shading_forecast_temp) }}"
                      - "{{ ( shading_forecast_sensor == [] ) or (states(shading_forecast_sensor) in shading_weather_conditions) }}"
                sequence:
                  # we are ready for shading in
                  - if: # check helper or if cover is higher than ventilate position. In this case we consider cover position like open and therefor we want to use the delay timer
                      - or:
                          - "{{ cover_status_helper_enabled and cover_status_open and not cover_status_shading }}"
                          - "{{ cover_status_helper_disabled and (current_position | int(default=101) > ventilate_position) }}"
                      - not:
                          - condition: trigger # auto_shading_start_condition
                            id: "t_si_7"
                    then:
                      - alias: "Wait the number of seconds set in shading_waitingtime"
                        delay:
                          seconds: !input shading_waitingtime_start
                  - delay: "00:00:{{ range(drive_delay_fix|int(0), drive_delay_fix|int(0) + drive_delay_random|int(0) +1) | random }}"
                  - repeat:
                      for_each: "{{ blind_entities|list }}"
                      sequence:
                        - alias: "Wait 1-5 random seconds to prevent sending to many commands to covers at same time"
                          delay: "00:00:{{ (range(1, 3)|random|int) }}"
                        - alias: "Moving the cover to shading position"
                          service: cover.set_cover_position
                          data:
                            position: !input shading_cover_position
                          target:
                            entity_id: "{{ repeat.item }}"
                        - if:
                            - "{{ state_attr(blind, 'current_tilt_position') != 'None' }}"
                          then:
                            - alias: "Moving the cover to tilt position"
                              service: cover.set_cover_tilt_position
                              data:
                                tilt_position: !input shading_tilt_position
                              target:
                                entity_id: !input blind
                  - if:
                      - "{{ 'cover_helper_enabled' in cover_status_options }}"
                    then:
                      - service: input_text.set_value
                        data:
                          entity_id: !input cover_status_helper
                          value: |
                            {% set dictionary = states(cover_status_helper) | from_json  %}
                            {% set result = dict(dictionary, **{'open': 'off', 'close': 'off', 'ventilate': 'off', 'shading': 'on', 't': as_timestamp(now())}) %}
                            {{ result | to_json }}
                  - stop: "Stop the automation"

              - alias: "Check for opening"
                conditions:
                  - "{{ 'auto_up_enabled' in auto_up_options }}"
                  - condition: !input auto_up_condition
                  - or: # Check if the trigger is for normal cover opening
                      - condition: trigger
                        id:
                          - "t_bo_1" # brightness_up - default_brightness_sensor
                          - "t_bo_2" # time_up_late
                          - "t_bo_3" # time_up_early
                          - "t_bo_4" # time_up_early_non_workday
                          - "t_bo_5" # resident
                          - "t_bo_6" # brightness_up - shading_brightness_sensor
                          - "t_bo_7" # sun_elevation_up
                  - or:
                      - "{{ cover_status_helper_enabled and not cover_status_open and not cover_status_shading }}"
                      - "{{ cover_status_helper_disabled and (current_position | int(default=101) == ventilate_position) }}"
                      # - "{{ cover_status_helper_disabled and (current_position | int(default=101) == shading_cover_position) }}" # NEW
                      - "{{ cover_status_helper_disabled and (current_position | int(default=110) <= closed_position + position_tolerance) and (current_position | int(default=110) >= closed_position - position_tolerance)}}"
                  - "{{ ( (resident_sensor == [] ) or (is_state(resident_sensor, ['false', 'off'])) ) }}"
                  # Now we have to check different opening scenarios
                  - or:
                      - and: # Covers - opening - up late reached
                          - "{{ now() >= today_at(time_up_late) }}"
                          - or:
                              - "{{ now() <= today_at(time_down_early) + timedelta(seconds = 5) }}"
                              - "{{ now() <= today_at(time_down_late) + timedelta(seconds = 5) }}"
                      - and: # Covers - opening - up early reached and brightness/sun above minimum
                          - or:
                              - and:
                                  - "{{ (workday_sensor == [] or (is_state(workday_sensor, 'on')) ) }}"
                                  - "{{ now() >= today_at(time_up_early) }}"
                              - and:
                                  - "{{ (workday_sensor == [] ) or (is_state(workday_sensor, 'off')) }}"
                                  - "{{ now() >= today_at(time_up_early_non_workday) }}"
                          - "{{ now() <= today_at(time_up_late) + timedelta(seconds = 5) }}"
                          - or:
                              - or:
                                  - "{{ 'auto_brightness_enabled' in auto_brightness_options and default_brightness_sensor == [] and shading_brightness_sensor == [] }}"
                                  - "{{ 'auto_brightness_enabled' in auto_brightness_options and default_brightness_sensor != [] and (states(default_brightness_sensor) | int(default=brightness_up) >= brightness_up) }}"
                                  - "{{ 'auto_brightness_enabled' in auto_brightness_options and default_brightness_sensor == [] and shading_brightness_sensor != [] and (states(shading_brightness_sensor) | int(default=brightness_up) >= brightness_up) }}"
                              - or:
                                  - "{{ 'auto_sun_enabled' in auto_sun_options and default_sun_sensor == [] }}"
                                  - "{{ 'auto_sun_enabled' in auto_sun_options and default_sun_sensor != [] and (current_sun_elevation | int(default=sun_elevation_up) >= sun_elevation_up) }}"

                sequence:
                  # ok, we can open the cover
                  - delay: "00:00:{{ range(drive_delay_fix|int(0), drive_delay_fix|int(0) + drive_delay_random|int(0) +1) | random }}"
                  - repeat:
                      for_each: "{{ blind_entities|list }}"
                      sequence:
                        - alias: "Wait 1-5 random seconds to prevent sending to many commands to covers at same time"
                          delay: "00:00:{{ (range(1, 3)|random|int) }}"
                        - if:
                            - "{{ open_position == 100 }}"
                          then:
                            - alias: "Moving the cover to open position"
                              service: cover.open_cover
                              data: {}
                              target:
                                entity_id: "{{ repeat.item }}"
                          else:
                            - alias: "Moving the cover to open position"
                              service: cover.set_cover_position
                              data:
                                position: !input open_position
                              target:
                                entity_id: "{{ repeat.item }}"
                  - if:
                      - "{{ 'cover_helper_enabled' in cover_status_options }}"
                    then:
                      - service: input_text.set_value
                        data:
                          entity_id: !input cover_status_helper
                          value: |
                            {% set dictionary = states(cover_status_helper) | from_json  %}
                            {% set result = dict(dictionary, **{'open': 'on', 'close': 'off', 'ventilate': 'off', 'shading': 'off', 't': as_timestamp(now())}) %}
                            {{ result | to_json }}
                  - stop: "Stop the automation"

            default:
              - stop: "Stop the automation"

      - alias: "Check and perform shading out"
        conditions:
          - "{{ 'auto_shading_enabled' in auto_shading_options }}"
          - condition: !input auto_shading_end_condition
          - "{{ now() >= today_at(time_up_early) }}"
          - "{{ now() <= today_at(time_down_late) + timedelta(seconds = 5) }}"
          - or:
              - condition: trigger
                id:
                  - "t_so_1" # shading_min_temperatur1
                  - "t_so_2" # shading_min_temperatur2
                  - "t_so_3" # shading_sun_brightness_end
                  - "t_so_4" # shading_elevation_max
                  - "t_so_5" # shading_azimuth_end
                  - "t_so_6" # shading_elevation_min
                  - "t_so_7" # auto_shading_start_condition
          - or:
              - "{{ cover_status_helper_enabled and cover_status_shading }}"
              - "{{ cover_status_helper_disabled and (current_position | int(default=101) == shading_cover_position) }}"
        sequence:
          - if:
              # if sun is outside of shading window (azimuth or elevation) we immedately stop shading
              - and:
                  - "{{ current_sun_azimuth >= shading_azimuth_start and current_sun_azimuth <= shading_azimuth_end }}"
                  - "{{ current_sun_elevation >= shading_elevation_min and current_sun_elevation <= shading_elevation_max }}"
              - not:
                  - condition: trigger # auto_shading_start_condition
                    id: "t_so_7"
            then:
              - alias: "Wait the number of seconds set in shading_waitingtime_end"
                delay:
                  seconds: !input shading_waitingtime_end
          - if:
              - "{{ ( (window_sensor != []) and (is_state(window_sensor, 'on') ) ) }}"
              - "{{ 'auto_ventilate_enabled' in auto_ventilate_options }}"
            then:
              - repeat:
                  for_each: "{{ blind_entities|list }}"
                  sequence:
                    - alias: "Moving the cover to ventilate position"
                      service: cover.set_cover_position
                      data:
                        position: !input ventilate_position
                      target:
                        entity_id: "{{ repeat.item }}"
                    - alias: "Wait 1-5 random seconds to prevent sending to many commands to covers at same time"
                      delay: "00:00:{{ (range(1, 3)|random|int) }}"
              - if:
                  - "{{ 'cover_helper_enabled' in cover_status_options }}"
                then:
                  - service: input_text.set_value
                    data:
                      entity_id: !input cover_status_helper
                      value: |
                        {% set dictionary = states(cover_status_helper) | from_json  %}
                        {% set result = dict(dictionary, **{'open': 'off', 'close': 'off', 'ventilate': 'on', 'shading': 'off', 't': as_timestamp(now())}) %}
                        {{ result | to_json }}
            else:
              - repeat:
                  for_each: "{{ blind_entities|list }}"
                  sequence:
                    - alias: "Wait 1-5 random seconds to prevent sending to many commands to covers at same time"
                      delay: "00:00:{{ (range(1, 3)|random|int) }}"
                    - alias: "Moving the cover to open position"
                      service: cover.set_cover_position
                      data:
                        position: !input open_position
                      target:
                        entity_id: "{{ repeat.item }}"
              - if:
                  - "{{ 'cover_helper_enabled' in cover_status_options }}"
                then:
                  - service: input_text.set_value
                    data:
                      entity_id: !input cover_status_helper
                      value: |
                        {% set dictionary = states(cover_status_helper) | from_json  %}
                        {% set result = dict(dictionary, **{'open': 'on', 'close': 'off', 'ventilate': 'off', 'shading': 'off', 't': as_timestamp(now())}) %}
                        {{ result | to_json }}

          - stop: "Stop the automation"

      - alias: "Check for closing cover"
        conditions:
          - or:
              - "{{ 'auto_down_enabled' in auto_down_options }}"
              - "{{ 'auto_ventilate_enabled' in auto_ventilate_options }}"
          - or:
              - condition: !input auto_down_condition
              - condition: trigger # resident_sensor
                id: "t_bc_5"
          - "{{ current_position | int(default=110) > closed_position }}"
          - or:
              # Check if we have a trigger for cover down
              - condition: trigger
                id:
                  - "t_bc_1" # brightness_down
                  - "t_bc_2" # time_down_early
                  - "t_bc_3" # time_down_late
                  - "t_bc_4" # window_sensor
                  - "t_bc_5" # resident_sensor
                  - "t_bc_6" # brightness_down
                  - "t_bc_7" # sun_elevation_down
          # check to allow a window but a door only if window_sensor not open - we want protection
          - "{{ ( ( door_sensor == 'false' ) or ( (door_sensor == 'true') and (window_sensor == []) ) or ( (door_sensor == 'true') and (window_sensor != []) and (is_state(window_sensor, 'off') ) ) ) }}"
          - or:
              - "{{ cover_status_helper_enabled and not cover_status_close }}"
              - "{{ cover_status_helper_disabled and (current_position | int(default=110) <= open_position + position_tolerance) and (current_position | int(default=110) >= open_position - position_tolerance)}}"
              - "{{ cover_status_helper_disabled and (current_position == ventilate_position) }}"
          - or:
              - alias: Covers - closing - down late reached
                and:
                  - "{{ 'auto_down_enabled' in auto_down_options }}"
                  - "{{ now() >= today_at(time_down_late) }}"

              - alias: Covers - closing - down early reached and brightness/sun below minimum
                and:
                  - "{{ 'auto_down_enabled' in auto_down_options }}"
                  - "{{ now() >= today_at(time_down_early) }}"
                  - "{{ now() <= today_at(time_down_late) + timedelta(seconds = 5) }}"
                  - or:
                      - or:
                          - "{{ 'auto_brightness_enabled' in auto_brightness_options and default_brightness_sensor == [] and shading_brightness_sensor == [] }}"
                          - "{{ 'auto_brightness_enabled' in auto_brightness_options and default_brightness_sensor != [] and (states(default_brightness_sensor) | int(default=brightness_down) <= brightness_down) }}"
                          - "{{ 'auto_brightness_enabled' in auto_brightness_options and shading_brightness_sensor != [] and (states(shading_brightness_sensor) | int(default=brightness_down) <= brightness_down) }}"
                      - or:
                          - "{{ 'auto_sun_enabled' in auto_sun_options and default_sun_sensor == [] }}"
                          - "{{ 'auto_sun_enabled' in auto_sun_options and default_sun_sensor != [] and (current_sun_elevation | int(default=sun_elevation_down) <= sun_elevation_down) }}"

              - alias: Covers - closing - due to resident goes sleeping
                and:
                  - "{{ 'auto_down_enabled' in auto_down_options }}"
                  - "{{ ((resident_sensor != [] ) and (is_state(resident_sensor, 'on')) ) }}"
                  - condition: trigger #  Resident_sensor
                    id: t_bc_5

              - alias: Covers - closing after ventilate
                and:
                  - condition: trigger # Window_sensor
                    id: "t_bc_4"
                  - "{{ 'auto_ventilate_enabled' in auto_ventilate_options }}"
                  - "{{ (window_sensor != [] ) and (states(window_sensor) == 'off') }}"
                  - or:
                      - "{{ cover_status_helper_enabled and cover_status_ventilate }}"
                      - "{{ cover_status_helper_disabled and (current_position | int(default=101) == ventilate_position) }}"

        sequence:
          - if:
              - not:
                  - condition: trigger # Windows sensor
                    id: "t_bc_4"
            then:
              - delay: "00:00:{{ range(drive_delay_fix|int(0), drive_delay_fix|int(0) + drive_delay_random|int(0) +1) | random }}"
          - if:
              - "{{ ( (window_sensor != []) and (is_state(window_sensor, 'on') ) ) }}"
              - "{{ 'auto_ventilate_enabled' in auto_ventilate_options }}"
            then:
              - repeat:
                  for_each: "{{ blind_entities|list }}"
                  sequence:
                    - alias: "Moving the cover to ventilate position"
                      service: cover.set_cover_position
                      data:
                        position: !input ventilate_position
                      target:
                        entity_id: "{{ repeat.item }}"
                    - alias: "Wait 1-5 random seconds to prevent sending to many commands to covers at same time"
                      delay: "00:00:{{ (range(1, 3)|random|int) }}"
              - if:
                  - "{{ 'cover_helper_enabled' in cover_status_options }}"
                then:
                  - service: input_text.set_value
                    data:
                      entity_id: !input cover_status_helper
                      value: |
                        {% set dictionary = states(cover_status_helper) | from_json  %}
                        {% set result = dict(dictionary, **{'open': 'off', 'close': 'off', 'ventilate': 'on', 'shading': 'off', 't': as_timestamp(now())}) %}
                        {{ result | to_json }}
            else:
              - repeat:
                  for_each: "{{ blind_entities|list }}"
                  sequence:
                    - if:
                        - "{{ closed_position == 0 }}"
                      then:
                        - alias: "Moving the cover to close position"
                          service: cover.close_cover
                          data: {}
                          target:
                            entity_id: "{{ repeat.item }}"
                      else:
                        - alias: "Moving the cover to close position"
                          service: cover.set_cover_position
                          data:
                            position: !input closed_position
                          target:
                            entity_id: "{{ repeat.item }}"
                    - alias: "Wait 1-5 random seconds to prevent sending to many commands to covers at same time"
                      delay: "00:00:{{ (range(1, 3)|random|int) }}"
              - if:
                  - "{{ 'cover_helper_enabled' in cover_status_options }}"
                then:
                  - service: input_text.set_value
                    data:
                      entity_id: !input cover_status_helper
                      value: |
                        {% set dictionary = states(cover_status_helper) | from_json  %}
                        {% set result = dict(dictionary, **{'open': 'off', 'close': 'on', 'ventilate': 'off', 'shading': 'off', 't': as_timestamp(now())}) %}
                        {{ result | to_json }}
          - stop: "Stop the automation"

      - alias: Window sensor - opened
        conditions:
          - condition: trigger # window_sensor
            id: "t_bv_1"
          - "{{ 'auto_ventilate_enabled' in auto_ventilate_options }}"
          - "{{ ( (window_sensor != []) and (is_state(window_sensor, 'on')) ) }}"
          - or:
              - "{{ cover_status_helper_enabled and cover_status_close }}"
              - "{{ cover_status_helper_disabled and (current_position | int(default=110) <= closed_position + position_tolerance) and (current_position | int(default=110) >= closed_position - position_tolerance) }}"
        sequence:
          - repeat:
              for_each: "{{ blind_entities|list }}"
              sequence:
                - alias: "Moving the cover to ventilate position"
                  service: cover.set_cover_position
                  data:
                    position: !input ventilate_position
                  target:
                    entity_id: "{{ repeat.item }}"
                - alias: "Wait 1-5 random seconds to prevent sending to many commands to covers at same time"
                  delay: "00:00:{{ (range(1, 3)|random|int) }}"
          - if:
              - "{{ 'cover_helper_enabled' in cover_status_options }}"
            then:
              - service: input_text.set_value
                data:
                  entity_id: !input cover_status_helper
                  value: |
                    {% set dictionary = states(cover_status_helper) | from_json  %}
                    {% set result = dict(dictionary, **{'open': 'off', 'close': 'off', 'ventilate': 'on', 'shading': 'off', 't': as_timestamp(now())}) %}
                    {{ result | to_json }}
          - stop: "Stop the automation"

    default:
      # - if:
      #     - or:
      #         - "{{ closed_position > ventilate_position }}"
      #         # - "{{ closed_position > shading_cover_position }}"
      #         - "{{ open_position < closed_position }}"
      #         - "{{ open_position < ventilate_position }}"
      #         - "{{ open_position < shading_cover_position }}"
      #   then:
      #     - service: system_log.write
      #       data:
      #         level: "error"
      #         message: "Cover Control Automation (CCA) - Incorrect position values in the blueprint. Please note the instructions in the blueprint."
      #         logger: "blueprints.hvorragend.cover_control_automation"
      - stop: "Stopping the automation - Reset"
